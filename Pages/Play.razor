@page "/play/{GameId:int}"
@inject HttpClient _httpClient
@inject IJSRuntime _jsRuntime
@inject GameRenderHandler _renderHandler

<label>@TextArea</label>
<img @ref="@ImageBuffer" src="@ImageBufferUrl" hidden/>
<div ><BECanvas @ref="_canvas" Height="@_renderHandler.height" Width="@_renderHandler.width" ></BECanvas></div>
<input type="range" step="2" max="200" min="20" @bind:event="oninput" @bind="_renderHandler.ZoomGrade"/>\

@code {

    [Parameter]
    public int GameId { get; set; }
    public string TextArea { get; set; }
    public ElementReference ImageBuffer { get; set; }
    public string ImageBufferUrl { get; set; }
    private int _zoomGrade = 100;
    public int ZoomGrade {
        get 
        {
            return _zoomGrade;
        }
        set 
        { 
            _zoomGrade = value;
            _renderHandler.RenderBoardAsync();
        }
    }
    public BECanvasComponent _canvas { get; set; }
    public Canvas2DContext _canvasContext { get; set; }

    public GameModel.Game Game { get; set; }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await _renderHandler.InitializeAsync(Game, _canvasContext);
        if(!await SynchronizeGameModelAsync())

           await _renderHandler.ChangeTabAsync(1);

        _canvasContext = await _canvas.CreateCanvas2DAsync();
        await _renderHandler.RenderBoardAsync();
    }
   

    public async Task<bool> SynchronizeGameModelAsync()
    {
        
        try
        {
            var or = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "/js/cookies.js");
            var token = await or.InvokeAsync<string>("getCookie", "gboard_signin_token");

            var request = new HttpRequestMessage(HttpMethod.Get, $"https://localhost:5001/Game/Sync/{GameId}");
            request.Headers.Add("gboard_signin_token", token);
            var response = await _httpClient.SendAsync(request);
            var json = await response.Content.ReadAsStringAsync();
            if (string.IsNullOrEmpty(json))
                return false;
            if (Newtonsoft.Json.JsonConvert.DeserializeObject<Game>(json) == null)
                return false;
            Game = Newtonsoft.Json.JsonConvert.DeserializeObject<Game>(json)!;
        }
        catch
        {
            return false;
        }
        return true;
    }

}
