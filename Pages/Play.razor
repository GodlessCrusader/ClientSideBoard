@page "/play/{GameId:int}"
@inject HttpClient _httpClient
@inject IJSRuntime _jsRuntime
@inject GameRenderHandler _renderHandler
@inject ServerApiCaller _apiCaller

<label>@TextArea</label>
<input id="zoom-input-range" type="range" step="2" max="200" min="20" @bind:event="oninput" @bind="_renderHandler.ZoomGrade" />
<div id="play-container">
    <div id="board-render-canvas">
        <BECanvas @ref="_canvas" Height="@_renderHandler.height" Width="@_renderHandler.width"/>
    </div>

    <div id="chat-container">

    <div><TabNavbar CurrentTab="CurrentTab" Tabs="Tabs"/></div>

    <div id="chat-history-container">
        <DynamicComponent Type="@CurrentTab.GetType()" Parameters="@CurrentTabParams"/>
    </div>

    <div>
        <ChatMessageField />
    </div>
</div>
</div>
<img @ref="@ImageBuffer" src="@ImageBufferUrl" hidden/>


@code {

    [Parameter]
    public int GameId { get; set; }
    public string TextArea { get; set; }
    public ElementReference ImageBuffer { get; set; }
    public string ImageBufferUrl { get; set; }
    public IComponent CurrentTab { get; set; } = new ChatHistoryField();
    public Dictionary<string, object> CurrentTabParams { get; set; } = new Dictionary<string, object>();
    public BECanvasComponent _canvas { get; set; }
    public Canvas2DContext _canvasContext { get; set; }

    public readonly List<Type> Tabs = new() {typeof(ChatHistoryField) };

    public GameModel.Game Game { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!await SynchronizeGameModelAsync())
            throw new FileLoadException("Failed to load a game");
        if (firstRender)
        {

            _canvasContext = await _canvas.CreateCanvas2DAsync();

            await _renderHandler.InitializeAsync(Game, _canvasContext, ImageBuffer);

            return;
        }

        await _renderHandler.RenderBoardAsync();


    }


    public async Task<bool> SynchronizeGameModelAsync()
    {

        try
        {
            if(GameId == 0)
            {
                Game = new();
                return true;
            }
            var response = await _apiCaller.SynchronizeGameStateAsync(GameId);
            var json = await response.Content.ReadAsStringAsync();
            if (string.IsNullOrEmpty(json))
                return false;
            if (Newtonsoft.Json.JsonConvert.DeserializeObject<Game>(json) == null)
                return false;
            Game = Newtonsoft.Json.JsonConvert.DeserializeObject<Game>(json)!;
        }
        catch
        {
            return false;
        }
        return true;
    }

}
