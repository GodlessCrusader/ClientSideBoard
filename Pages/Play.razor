@page "/play/{GameId:int}"
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.SignalR.Client;
@inject HttpClient _httpClient
@inject IJSRuntime _jsRuntime
@inject GameRenderHandler _renderHandler
@inject ServerApiCaller _apiCaller
@inject AuthenticationStateProvider _authStateProvider

<label>@TextArea</label>
<input id="zoom-input-range" type="range" step="2" max="200" min="20" @bind:event="oninput" @bind="_renderHandler.ZoomGrade" />
<div id="play-container">
    <div id="board-render-canvas">
        <BECanvas @ref="_canvas" Height="@_renderHandler.height" Width="@_renderHandler.width"/>
    </div>

    <div id="chat-container">
        <div id="tab-container">@{
                foreach (var tab in Tabs) {
                    <button @onclick="() => {
                        CurrentTab = tab.Item1;
                        CurrentTabParams.Clear();
                        CurrentTabParams.Add(tab.Item2, tab.Item3); 
                    }" class="btn-light"> 
                        @tab.Item2
                    </button>
                }  
        }</div>

    <div id="chat-history-container">
        <DynamicComponent Type="@CurrentTab" Parameters="@CurrentTabParams"/>
    </div>

    <div class="card-footer text-muted d-flex justify-content-start align-items-center align-bottom p-3" style="z-index:1;">
        <div class="input-group mb-0">
            <input @bind="TextArea" type="text" class="form-control" placeholder="Type message"
                    aria-label="Recipient's username" aria-describedby="button-addon2" />
            <button @onclick="() => SendMessageAsync(TextArea)" class="btn btn-warning" type="button" id="button-addon2" style="padding-top: .55rem;">
                Send
            </button>
        </div>
    </div>
</div>
</div>
<img @ref="@ImageBuffer" src="@ImageBufferUrl" hidden/>


@code {

    [Parameter]
    public int GameId { get; set; }

    public Chat Chat { get; set; }

    public string TextArea { get; set; }

    public ElementReference ImageBuffer { get; set; }

    public string ImageBufferUrl { get; set; }

    public Type CurrentTab { get; set; } = typeof(MediaList);

    public Dictionary<string, object> CurrentTabParams { get; set; } = new Dictionary<string, object>();

    public BECanvasComponent _canvas { get; set; }

    public Canvas2DContext _canvasContext { get; set; }

    private HubConnection _hubConnection { get; set; }

    public readonly List<(Type, string, object)> Tabs = new(); 

    private const string SERVER_URI = "https://www.localhost:5001";

    public GameModel.Game Game { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Tabs.Add((typeof(MediaList), "Media", MediaType.Image));

        Tabs.Add((typeof(ChatHistoryField), "Chat", Chat));

        await ConnectToHubAsync();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!await SynchronizeGameModelAsync())
            throw new FileLoadException("Failed to load a game");
        if (firstRender)
        {


            _canvasContext = await _canvas.CreateCanvas2DAsync();

            await _renderHandler.InitializeAsync(Game, _canvasContext, ImageBuffer);



            return;
        }

        await _renderHandler.RenderBoardAsync();


    }

    public async Task<bool> SynchronizeGameModelAsync()
    {
        try
        {
            if(GameId == 0)
            {
                Game = new();
                return true;
            }
            var response = await _apiCaller.SynchronizeGameStateAsync(GameId);
            var json = await response.Content.ReadAsStringAsync();
            if (string.IsNullOrEmpty(json))
                return false;
            if (Newtonsoft.Json.JsonConvert.DeserializeObject<Game>(json) == null)
                return false;
            Game = Newtonsoft.Json.JsonConvert.DeserializeObject<Game>(json)!;
        }
        catch
        {
            return false;
        }
        return true;
    }

    public async Task ConnectToHubAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl($"{SERVER_URI}/gamehub")
            .Build();

        _hubConnection.On<Game>("UpdateGameState", (game) => {
            _renderHandler.RenderUpdateAsync(game);
            StateHasChanged();
        });

        _hubConnection.On<Chat>("UpdateChatState", (chat) => {

            CurrentTabParams.Clear();

            Chat = chat;

            StateHasChanged();

            foreach (var m in Chat.Messages)
                Console.WriteLine(m.UserAvatarUrl);

            Console.WriteLine("UpdateChatState triggered");
            Console.WriteLine($"Chat has {Chat.Messages.Count()} messages atm");
        });


        await _hubConnection.StartAsync();

        var or = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "/js/cookies.js");
        var token = await or.InvokeAsync<string>("getCookie", "gboard_signin_token");
        
        await _hubConnection.SendAsync("JoinGameAsync", GameId, token);


    }

    public async Task SendMessageAsync(string message)
    {
        var or = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "/js/cookies.js");
        var token = await or.InvokeAsync<string>("getCookie", "gboard_signin_token");
        await _hubConnection.SendAsync("RecieveMessageAsync", GameId, token, new TextMessage()
        {
            Text = message
        });
        TextArea = string.Empty;
    }
}
