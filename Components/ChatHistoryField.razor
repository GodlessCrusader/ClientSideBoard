@implements IDisposable
@inject HubStateProvider _hub
<div>
    @{
        if (_hub.Chat != null && _hub.Chat.Messages != null)
        {
            foreach (var m in _hub.Chat.Messages)
            {
                <img height="50" length="50" src="@string.Concat("https://www.localhost:5001" ,m.UserAvatarUrl.Replace("..", ""))">

                <label>@string.Concat(m.UserDisplayName, ": ", m.Text, " ", m.RecievingTime.ToString())</label>
                <hr>
            }
        }        
        else
        {
            <label class="alert-danger">Chat loading error</label>
        }
        
    }

</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        if(!_hub.IsConnected)
        {
            await _hub.ConnectAsync();
        }
        //if(_hub.StateChangeRequired == null)
            
        _hub.StateChangeRequired += StateHasChanged;
    }

    public Chat? Chat { get; set; }



    public void Dispose()
    {
        _hub.StateChangeRequired -= StateHasChanged;
    }

}
